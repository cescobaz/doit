webpackHotUpdate("bundle",{

/***/ "./core/document-ios.js":
/***/ (function(module, exports, __webpack_require__) {

const TodoTXT = __webpack_require__("./core/todotxt.js");

const Document = UIDocument.extend({
  initWithFileURL(url) {
    this.todotxt = new TodoTXT();
    return super.initWithFileURL(url);
  },

  contentsForTypeError(type) {
    console.log('contentsForType SAVINGGGG??', type);
    const text = this.todotxt.serialize(this.tasks);
    console.log(text);

    try {
      return NSString.stringWithString(text).dataUsingEncoding(NSUTF8StringEncoding);
    } catch (error) {
      console.log(error);
      return text;
    }
  },

  loadFromContentsOfTypeError(contents, typeName) {
    const stringContent = NSString.alloc().initWithDataEncoding(contents, NSUTF8StringEncoding).toString();
    const tasks = this.todotxt.parse(stringContent);
    this.tasks = tasks;
    return true;
  }

}, {
  name: 'Document'
});
const todotxtBookmarkDataKey = 'todotxtBookmarkData';

function storeBookmark(url) {
  console.log('storeBookmark');
  const data = url.bookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError(NSURLBookmarkCreationOptions.NSURLBookmarkCreationWithSecurityScope, [], null);
  NSUserDefaults.standardUserDefaults.setObjectForKey(data, todotxtBookmarkDataKey);
}

function loadBookmark() {
  const data = NSUserDefaults.standardUserDefaults.dataForKey(todotxtBookmarkDataKey);

  if (!data) {
    return null;
  }

  const isStale = new interop.Reference(interop.types.bool);
  const url = NSURL.URLByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(data, NSURLBookmarkCreationOptions.NSURLBookmarkCreationWithSecurityScope, null, isStale);
  console.log('[INFO] isStale', isStale.value);

  if (isStale.value) {
    console.log('[WARNING] isStale == true, I will re-store and re-load bookmark', isStale.value);
    storeBookmark(url);
    return loadBookmark();
  }

  return url;
}

function loadDocument(documentLoaded) {
  const url = loadBookmark();
  loadDocumentWithURL(url, documentLoaded);
}

function loadDocumentWithURL(url, documentLoaded) {
  if (!url) {
    return documentLoaded(null);
  }

  const document = Document.alloc().initWithFileURL(url);
  document.openWithCompletionHandler(success => {
    if (!success) {
      documentLoaded(null);
    }

    storeBookmark(url);
    documentLoaded(document);
  });
}

module.exports = {
  loadDocumentWithURL,
  loadDocument
};

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb3JlL2RvY3VtZW50LWlvcy5qcyJdLCJuYW1lcyI6WyJUb2RvVFhUIiwicmVxdWlyZSIsIkRvY3VtZW50IiwiVUlEb2N1bWVudCIsImV4dGVuZCIsImluaXRXaXRoRmlsZVVSTCIsInVybCIsInRvZG90eHQiLCJjb250ZW50c0ZvclR5cGVFcnJvciIsInR5cGUiLCJjb25zb2xlIiwibG9nIiwidGV4dCIsInNlcmlhbGl6ZSIsInRhc2tzIiwiTlNTdHJpbmciLCJzdHJpbmdXaXRoU3RyaW5nIiwiZGF0YVVzaW5nRW5jb2RpbmciLCJOU1VURjhTdHJpbmdFbmNvZGluZyIsImVycm9yIiwibG9hZEZyb21Db250ZW50c09mVHlwZUVycm9yIiwiY29udGVudHMiLCJ0eXBlTmFtZSIsInN0cmluZ0NvbnRlbnQiLCJhbGxvYyIsImluaXRXaXRoRGF0YUVuY29kaW5nIiwidG9TdHJpbmciLCJwYXJzZSIsIm5hbWUiLCJ0b2RvdHh0Qm9va21hcmtEYXRhS2V5Iiwic3RvcmVCb29rbWFyayIsImRhdGEiLCJib29rbWFya0RhdGFXaXRoT3B0aW9uc0luY2x1ZGluZ1Jlc291cmNlVmFsdWVzRm9yS2V5c1JlbGF0aXZlVG9VUkxFcnJvciIsIk5TVVJMQm9va21hcmtDcmVhdGlvbk9wdGlvbnMiLCJOU1VSTEJvb2ttYXJrQ3JlYXRpb25XaXRoU2VjdXJpdHlTY29wZSIsIk5TVXNlckRlZmF1bHRzIiwic3RhbmRhcmRVc2VyRGVmYXVsdHMiLCJzZXRPYmplY3RGb3JLZXkiLCJsb2FkQm9va21hcmsiLCJkYXRhRm9yS2V5IiwiaXNTdGFsZSIsImludGVyb3AiLCJSZWZlcmVuY2UiLCJ0eXBlcyIsImJvb2wiLCJOU1VSTCIsIlVSTEJ5UmVzb2x2aW5nQm9va21hcmtEYXRhT3B0aW9uc1JlbGF0aXZlVG9VUkxCb29rbWFya0RhdGFJc1N0YWxlRXJyb3IiLCJ2YWx1ZSIsImxvYWREb2N1bWVudCIsImRvY3VtZW50TG9hZGVkIiwibG9hZERvY3VtZW50V2l0aFVSTCIsImRvY3VtZW50Iiwib3BlbldpdGhDb21wbGV0aW9uSGFuZGxlciIsInN1Y2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyxtQkFBRCxDQUF2Qjs7QUFFQSxNQUFNQyxRQUFRLEdBQUdDLFVBQVUsQ0FBQ0MsTUFBWCxDQUFrQjtBQUNqQ0MsaUJBQWUsQ0FBRUMsR0FBRixFQUFPO0FBQ3BCLFNBQUtDLE9BQUwsR0FBZSxJQUFJUCxPQUFKLEVBQWY7QUFDQSxXQUFPLE1BQU1LLGVBQU4sQ0FBc0JDLEdBQXRCLENBQVA7QUFDRCxHQUpnQzs7QUFLakNFLHNCQUFvQixDQUFFQyxJQUFGLEVBQVE7QUFDMUJDLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLDZCQUFaLEVBQTJDRixJQUEzQztBQUNBLFVBQU1HLElBQUksR0FBRyxLQUFLTCxPQUFMLENBQWFNLFNBQWIsQ0FBdUIsS0FBS0MsS0FBNUIsQ0FBYjtBQUNBSixXQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBWjs7QUFDQSxRQUFJO0FBQ0YsYUFBT0csUUFBUSxDQUFDQyxnQkFBVCxDQUEwQkosSUFBMUIsRUFBZ0NLLGlCQUFoQyxDQUFrREMsb0JBQWxELENBQVA7QUFDRCxLQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0FBQ2RULGFBQU8sQ0FBQ0MsR0FBUixDQUFZUSxLQUFaO0FBQ0EsYUFBT1AsSUFBUDtBQUNEO0FBQ0YsR0FmZ0M7O0FBZ0JqQ1EsNkJBQTJCLENBQUVDLFFBQUYsRUFBWUMsUUFBWixFQUFzQjtBQUMvQyxVQUFNQyxhQUFhLEdBQUdSLFFBQVEsQ0FBQ1MsS0FBVCxHQUFpQkMsb0JBQWpCLENBQXNDSixRQUF0QyxFQUFnREgsb0JBQWhELEVBQXNFUSxRQUF0RSxFQUF0QjtBQUNBLFVBQU1aLEtBQUssR0FBRyxLQUFLUCxPQUFMLENBQWFvQixLQUFiLENBQW1CSixhQUFuQixDQUFkO0FBQ0EsU0FBS1QsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBckJnQyxDQUFsQixFQXNCZDtBQUNEYyxNQUFJLEVBQUU7QUFETCxDQXRCYyxDQUFqQjtBQTBCQSxNQUFNQyxzQkFBc0IsR0FBRyxxQkFBL0I7O0FBQ0EsU0FBU0MsYUFBVCxDQUF3QnhCLEdBQXhCLEVBQTZCO0FBQzNCSSxTQUFPLENBQUNDLEdBQVIsQ0FBWSxlQUFaO0FBQ0EsUUFBTW9CLElBQUksR0FBR3pCLEdBQUcsQ0FBQzBCLHVFQUFKLENBQ1hDLDRCQUE0QixDQUFDQyxzQ0FEbEIsRUFDMEQsRUFEMUQsRUFDOEQsSUFEOUQsQ0FBYjtBQUVBQyxnQkFBYyxDQUFDQyxvQkFBZixDQUFvQ0MsZUFBcEMsQ0FBb0ROLElBQXBELEVBQTBERixzQkFBMUQ7QUFDRDs7QUFFRCxTQUFTUyxZQUFULEdBQXlCO0FBQ3ZCLFFBQU1QLElBQUksR0FBR0ksY0FBYyxDQUFDQyxvQkFBZixDQUFvQ0csVUFBcEMsQ0FBK0NWLHNCQUEvQyxDQUFiOztBQUNBLE1BQUksQ0FBQ0UsSUFBTCxFQUFXO0FBQ1QsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0QsUUFBTVMsT0FBTyxHQUFHLElBQUlDLE9BQU8sQ0FBQ0MsU0FBWixDQUFzQkQsT0FBTyxDQUFDRSxLQUFSLENBQWNDLElBQXBDLENBQWhCO0FBQ0EsUUFBTXRDLEdBQUcsR0FBR3VDLEtBQUssQ0FBQ0Msc0VBQU4sQ0FDVmYsSUFEVSxFQUVWRSw0QkFBNEIsQ0FBQ0Msc0NBRm5CLEVBR1YsSUFIVSxFQUdKTSxPQUhJLENBQVo7QUFJQTlCLFNBQU8sQ0FBQ0MsR0FBUixDQUFZLGdCQUFaLEVBQThCNkIsT0FBTyxDQUFDTyxLQUF0Qzs7QUFDQSxNQUFJUCxPQUFPLENBQUNPLEtBQVosRUFBbUI7QUFDakJyQyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxpRUFBWixFQUErRTZCLE9BQU8sQ0FBQ08sS0FBdkY7QUFDQWpCLGlCQUFhLENBQUN4QixHQUFELENBQWI7QUFDQSxXQUFPZ0MsWUFBWSxFQUFuQjtBQUNEOztBQUNELFNBQU9oQyxHQUFQO0FBQ0Q7O0FBRUQsU0FBUzBDLFlBQVQsQ0FBdUJDLGNBQXZCLEVBQXVDO0FBQ3JDLFFBQU0zQyxHQUFHLEdBQUdnQyxZQUFZLEVBQXhCO0FBQ0FZLHFCQUFtQixDQUFDNUMsR0FBRCxFQUFNMkMsY0FBTixDQUFuQjtBQUNEOztBQUVELFNBQVNDLG1CQUFULENBQThCNUMsR0FBOUIsRUFBbUMyQyxjQUFuQyxFQUFtRDtBQUNqRCxNQUFJLENBQUMzQyxHQUFMLEVBQVU7QUFDUixXQUFPMkMsY0FBYyxDQUFDLElBQUQsQ0FBckI7QUFDRDs7QUFDRCxRQUFNRSxRQUFRLEdBQUdqRCxRQUFRLENBQUNzQixLQUFULEdBQWlCbkIsZUFBakIsQ0FBaUNDLEdBQWpDLENBQWpCO0FBQ0E2QyxVQUFRLENBQUNDLHlCQUFULENBQW1DQyxPQUFPLElBQUk7QUFDNUMsUUFBSSxDQUFDQSxPQUFMLEVBQWM7QUFDWkosb0JBQWMsQ0FBQyxJQUFELENBQWQ7QUFDRDs7QUFDRG5CLGlCQUFhLENBQUN4QixHQUFELENBQWI7QUFDQTJDLGtCQUFjLENBQUNFLFFBQUQsQ0FBZDtBQUNELEdBTkQ7QUFPRDs7QUFFREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQUVMLHFCQUFGO0FBQXVCRjtBQUF2QixDQUFqQixDIiwiZmlsZSI6ImJ1bmRsZS44ZjhjN2RmZWQ2NGQ0NGViOWFjZi5ob3QtdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVG9kb1RYVCA9IHJlcXVpcmUoJy4vdG9kb3R4dCcpXG5cbmNvbnN0IERvY3VtZW50ID0gVUlEb2N1bWVudC5leHRlbmQoe1xuICBpbml0V2l0aEZpbGVVUkwgKHVybCkge1xuICAgIHRoaXMudG9kb3R4dCA9IG5ldyBUb2RvVFhUKClcbiAgICByZXR1cm4gc3VwZXIuaW5pdFdpdGhGaWxlVVJMKHVybClcbiAgfSxcbiAgY29udGVudHNGb3JUeXBlRXJyb3IgKHR5cGUpIHtcbiAgICBjb25zb2xlLmxvZygnY29udGVudHNGb3JUeXBlIFNBVklOR0dHRz8/JywgdHlwZSlcbiAgICBjb25zdCB0ZXh0ID0gdGhpcy50b2RvdHh0LnNlcmlhbGl6ZSh0aGlzLnRhc2tzKVxuICAgIGNvbnNvbGUubG9nKHRleHQpXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBOU1N0cmluZy5zdHJpbmdXaXRoU3RyaW5nKHRleHQpLmRhdGFVc2luZ0VuY29kaW5nKE5TVVRGOFN0cmluZ0VuY29kaW5nKSBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICByZXR1cm4gdGV4dFxuICAgIH1cbiAgfSxcbiAgbG9hZEZyb21Db250ZW50c09mVHlwZUVycm9yIChjb250ZW50cywgdHlwZU5hbWUpIHtcbiAgICBjb25zdCBzdHJpbmdDb250ZW50ID0gTlNTdHJpbmcuYWxsb2MoKS5pbml0V2l0aERhdGFFbmNvZGluZyhjb250ZW50cywgTlNVVEY4U3RyaW5nRW5jb2RpbmcpLnRvU3RyaW5nKClcbiAgICBjb25zdCB0YXNrcyA9IHRoaXMudG9kb3R4dC5wYXJzZShzdHJpbmdDb250ZW50KVxuICAgIHRoaXMudGFza3MgPSB0YXNrc1xuICAgIHJldHVybiB0cnVlXG4gIH1cbn0sIHtcbiAgbmFtZTogJ0RvY3VtZW50J1xufSlcblxuY29uc3QgdG9kb3R4dEJvb2ttYXJrRGF0YUtleSA9ICd0b2RvdHh0Qm9va21hcmtEYXRhJ1xuZnVuY3Rpb24gc3RvcmVCb29rbWFyayAodXJsKSB7XG4gIGNvbnNvbGUubG9nKCdzdG9yZUJvb2ttYXJrJylcbiAgY29uc3QgZGF0YSA9IHVybC5ib29rbWFya0RhdGFXaXRoT3B0aW9uc0luY2x1ZGluZ1Jlc291cmNlVmFsdWVzRm9yS2V5c1JlbGF0aXZlVG9VUkxFcnJvcihcbiAgICBOU1VSTEJvb2ttYXJrQ3JlYXRpb25PcHRpb25zLk5TVVJMQm9va21hcmtDcmVhdGlvbldpdGhTZWN1cml0eVNjb3BlLCBbXSwgbnVsbClcbiAgTlNVc2VyRGVmYXVsdHMuc3RhbmRhcmRVc2VyRGVmYXVsdHMuc2V0T2JqZWN0Rm9yS2V5KGRhdGEsIHRvZG90eHRCb29rbWFya0RhdGFLZXkpXG59XG5cbmZ1bmN0aW9uIGxvYWRCb29rbWFyayAoKSB7XG4gIGNvbnN0IGRhdGEgPSBOU1VzZXJEZWZhdWx0cy5zdGFuZGFyZFVzZXJEZWZhdWx0cy5kYXRhRm9yS2V5KHRvZG90eHRCb29rbWFya0RhdGFLZXkpXG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgY29uc3QgaXNTdGFsZSA9IG5ldyBpbnRlcm9wLlJlZmVyZW5jZShpbnRlcm9wLnR5cGVzLmJvb2wpXG4gIGNvbnN0IHVybCA9IE5TVVJMLlVSTEJ5UmVzb2x2aW5nQm9va21hcmtEYXRhT3B0aW9uc1JlbGF0aXZlVG9VUkxCb29rbWFya0RhdGFJc1N0YWxlRXJyb3IoXG4gICAgZGF0YSxcbiAgICBOU1VSTEJvb2ttYXJrQ3JlYXRpb25PcHRpb25zLk5TVVJMQm9va21hcmtDcmVhdGlvbldpdGhTZWN1cml0eVNjb3BlLFxuICAgIG51bGwsIGlzU3RhbGUpXG4gIGNvbnNvbGUubG9nKCdbSU5GT10gaXNTdGFsZScsIGlzU3RhbGUudmFsdWUpXG4gIGlmIChpc1N0YWxlLnZhbHVlKSB7XG4gICAgY29uc29sZS5sb2coJ1tXQVJOSU5HXSBpc1N0YWxlID09IHRydWUsIEkgd2lsbCByZS1zdG9yZSBhbmQgcmUtbG9hZCBib29rbWFyaycsIGlzU3RhbGUudmFsdWUpXG4gICAgc3RvcmVCb29rbWFyayh1cmwpXG4gICAgcmV0dXJuIGxvYWRCb29rbWFyaygpXG4gIH1cbiAgcmV0dXJuIHVybFxufVxuXG5mdW5jdGlvbiBsb2FkRG9jdW1lbnQgKGRvY3VtZW50TG9hZGVkKSB7XG4gIGNvbnN0IHVybCA9IGxvYWRCb29rbWFyaygpXG4gIGxvYWREb2N1bWVudFdpdGhVUkwodXJsLCBkb2N1bWVudExvYWRlZClcbn1cblxuZnVuY3Rpb24gbG9hZERvY3VtZW50V2l0aFVSTCAodXJsLCBkb2N1bWVudExvYWRlZCkge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiBkb2N1bWVudExvYWRlZChudWxsKVxuICB9XG4gIGNvbnN0IGRvY3VtZW50ID0gRG9jdW1lbnQuYWxsb2MoKS5pbml0V2l0aEZpbGVVUkwodXJsKVxuICBkb2N1bWVudC5vcGVuV2l0aENvbXBsZXRpb25IYW5kbGVyKHN1Y2Nlc3MgPT4ge1xuICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgZG9jdW1lbnRMb2FkZWQobnVsbClcbiAgICB9XG4gICAgc3RvcmVCb29rbWFyayh1cmwpXG4gICAgZG9jdW1lbnRMb2FkZWQoZG9jdW1lbnQpXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBsb2FkRG9jdW1lbnRXaXRoVVJMLCBsb2FkRG9jdW1lbnQgfVxuIl0sInNvdXJjZVJvb3QiOiIifQ==