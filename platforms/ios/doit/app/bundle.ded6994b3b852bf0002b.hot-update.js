webpackHotUpdate("bundle",{

/***/ "./core/document-ios.js":
/***/ (function(module, exports, __webpack_require__) {

const TodoTXT = __webpack_require__("./core/todotxt.js");

const Document = UIDocument.extend({
  initWithFileURL(url) {
    this.todotxt = new TodoTXT();
    return super.initWithFileURL(url);
  },

  contentsForTypeError(type) {
    console.log('contentsForType SAVINGGGG??', type);
    const text = this.todotxt.serialize(this.tasks);
    console.log(text);
    return NSString.stringWithString(text).dataUsingEncoding(NSUTF8StringEncoding);
  },

  loadFromContentsOfTypeError(contents, typeName) {
    const stringContent = NSString.alloc().initWithDataEncoding(contents, NSUTF8StringEncoding).toString();
    const tasks = this.todotxt.parse(stringContent);
    this.tasks = tasks;
    return true;
  }

}, {
  name: 'Document'
});
const todotxtBookmarkDataKey = 'todotxtBookmarkData';

function storeBookmark(url) {
  console.log('storeBookmark');
  const data = url.bookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError(NSURLBookmarkCreationOptions.NSURLBookmarkCreationWithSecurityScope, [], null);
  NSUserDefaults.standardUserDefaults.setObjectForKey(data, todotxtBookmarkDataKey);
}

function loadBookmark() {
  const data = NSUserDefaults.standardUserDefaults.dataForKey(todotxtBookmarkDataKey);

  if (!data) {
    return null;
  }

  const isStale = new interop.Reference(interop.types.bool);
  const url = NSURL.URLByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(data, NSURLBookmarkCreationOptions.NSURLBookmarkCreationWithSecurityScope, null, isStale);
  console.log('[INFO] isStale', isStale.value);

  if (isStale.value) {
    console.log('[WARNING] isStale == true, I will re-store and re-load bookmark', isStale.value);
    storeBookmark(url);
    return loadBookmark();
  }

  return url;
}

function loadDocument(documentLoaded) {
  const url = loadBookmark();
  loadDocumentWithURL(url, documentLoaded);
}

function loadDocumentWithURL(url, documentLoaded) {
  if (!url) {
    return documentLoaded(null);
  }

  const document = Document.alloc().initWithFileURL(url);
  document.openWithCompletionHandler(success => {
    if (!success) {
      documentLoaded(null);
    }

    storeBookmark(url);
    documentLoaded(document);
  });
}

module.exports = {
  loadDocumentWithURL,
  loadDocument
};

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb3JlL2RvY3VtZW50LWlvcy5qcyJdLCJuYW1lcyI6WyJUb2RvVFhUIiwicmVxdWlyZSIsIkRvY3VtZW50IiwiVUlEb2N1bWVudCIsImV4dGVuZCIsImluaXRXaXRoRmlsZVVSTCIsInVybCIsInRvZG90eHQiLCJjb250ZW50c0ZvclR5cGVFcnJvciIsInR5cGUiLCJjb25zb2xlIiwibG9nIiwidGV4dCIsInNlcmlhbGl6ZSIsInRhc2tzIiwiTlNTdHJpbmciLCJzdHJpbmdXaXRoU3RyaW5nIiwiZGF0YVVzaW5nRW5jb2RpbmciLCJOU1VURjhTdHJpbmdFbmNvZGluZyIsImxvYWRGcm9tQ29udGVudHNPZlR5cGVFcnJvciIsImNvbnRlbnRzIiwidHlwZU5hbWUiLCJzdHJpbmdDb250ZW50IiwiYWxsb2MiLCJpbml0V2l0aERhdGFFbmNvZGluZyIsInRvU3RyaW5nIiwicGFyc2UiLCJuYW1lIiwidG9kb3R4dEJvb2ttYXJrRGF0YUtleSIsInN0b3JlQm9va21hcmsiLCJkYXRhIiwiYm9va21hcmtEYXRhV2l0aE9wdGlvbnNJbmNsdWRpbmdSZXNvdXJjZVZhbHVlc0ZvcktleXNSZWxhdGl2ZVRvVVJMRXJyb3IiLCJOU1VSTEJvb2ttYXJrQ3JlYXRpb25PcHRpb25zIiwiTlNVUkxCb29rbWFya0NyZWF0aW9uV2l0aFNlY3VyaXR5U2NvcGUiLCJOU1VzZXJEZWZhdWx0cyIsInN0YW5kYXJkVXNlckRlZmF1bHRzIiwic2V0T2JqZWN0Rm9yS2V5IiwibG9hZEJvb2ttYXJrIiwiZGF0YUZvcktleSIsImlzU3RhbGUiLCJpbnRlcm9wIiwiUmVmZXJlbmNlIiwidHlwZXMiLCJib29sIiwiTlNVUkwiLCJVUkxCeVJlc29sdmluZ0Jvb2ttYXJrRGF0YU9wdGlvbnNSZWxhdGl2ZVRvVVJMQm9va21hcmtEYXRhSXNTdGFsZUVycm9yIiwidmFsdWUiLCJsb2FkRG9jdW1lbnQiLCJkb2N1bWVudExvYWRlZCIsImxvYWREb2N1bWVudFdpdGhVUkwiLCJk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QUFuQjtBQUNEOztBQUVELFNBQVNDLG1CQUFULENBQThCM0MsR0FBOUIsRUFBbUMwQyxjQUFuQyxFQUFtRDtBQUNqRCxNQUFJLENBQUMxQyxHQUFMLEVBQVU7QUFDUixXQUFPMEMsY0FBYyxDQUFDLElBQUQsQ0FBckI7QUFDRDs7QUFDRCxRQUFNRSxRQUFRLEdBQUdoRCxRQUFRLENBQUNxQixLQUFULEdBQWlCbEIsZUFBakIsQ0FBaUNDLEdBQWpDLENBQWpCO0FBQ0E0QyxVQUFRLENBQUNDLHlCQUFULENBQW1DQyxPQUFPLElBQUk7QUFDNUMsUUFBSSxDQUFDQSxPQUFMLEVBQWM7QUFDWkosb0JBQWMsQ0FBQyxJQUFELENBQWQ7QUFDRDs7QUFDRG5CLGlCQUFhLENBQUN2QixHQUFELENBQWI7QUFDQTBDLGtCQUFjLENBQUNFLFFBQUQsQ0FBZDtBQUNELEdBTkQ7QUFPRDs7QUFFREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQUVMLHFCQUFGO0FBQXVCRjtBQUF2QixDQUFqQixDIiwiZmlsZSI6ImJ1bmRsZS5kZWQ2OTk0YjNiODUyYmYwMDAyYi5ob3QtdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVG9kb1RYVCA9IHJlcXVpcmUoJy4vdG9kb3R4dCcpXG5cbmNvbnN0IERvY3VtZW50ID0gVUlEb2N1bWVudC5leHRlbmQoe1xuICBpbml0V2l0aEZpbGVVUkwgKHVybCkge1xuICAgIHRoaXMudG9kb3R4dCA9IG5ldyBUb2RvVFhUKClcbiAgICByZXR1cm4gc3VwZXIuaW5pdFdpdGhGaWxlVVJMKHVybClcbiAgfSxcbiAgY29udGVudHNGb3JUeXBlRXJyb3IgKHR5cGUpIHtcbiAgICBjb25zb2xlLmxvZygnY29udGVudHNGb3JUeXBlIFNBVklOR0dHRz8/JywgdHlwZSlcbiAgICBjb25zdCB0ZXh0ID0gdGhpcy50b2RvdHh0LnNlcmlhbGl6ZSh0aGlzLnRhc2tzKVxuICAgIGNvbnNvbGUubG9nKHRleHQpXG4gICAgcmV0dXJuIE5TU3RyaW5nLnN0cmluZ1dpdGhTdHJpbmcodGV4dCkuZGF0YVVzaW5nRW5jb2RpbmcoTlNVVEY4U3RyaW5nRW5jb2RpbmcpXG4gIH0sXG4gIGxvYWRGcm9tQ29udGVudHNPZlR5cGVFcnJvciAoY29udGVudHMsIHR5cGVOYW1lKSB7XG4gICAgY29uc3Qgc3RyaW5nQ29udGVudCA9IE5TU3RyaW5nLmFsbG9jKCkuaW5pdFdpdGhEYXRhRW5jb2RpbmcoY29udGVudHMsIE5TVVRGOFN0cmluZ0VuY29kaW5nKS50b1N0cmluZygpXG4gICAgY29uc3QgdGFza3MgPSB0aGlzLnRvZG90eHQucGFyc2Uoc3RyaW5nQ29udGVudClcbiAgICB0aGlzLnRhc2tzID0gdGFza3NcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59LCB7XG4gIG5hbWU6ICdEb2N1bWVudCdcbn0pXG5cbmNvbnN0IHRvZG90eHRCb29rbWFya0RhdGFLZXkgPSAndG9kb3R4dEJvb2ttYXJrRGF0YSdcbmZ1bmN0aW9uIHN0b3JlQm9va21hcmsgKHVybCkge1xuICBjb25zb2xlLmxvZygnc3RvcmVCb29rbWFyaycpXG4gIGNvbnN0IGRhdGEgPSB1cmwuYm9va21hcmtEYXRhV2l0aE9wdGlvbnNJbmNsdWRpbmdSZXNvdXJjZVZhbHVlc0ZvcktleXNSZWxhdGl2ZVRvVVJMRXJyb3IoXG4gICAgTlNVUkxCb29rbWFya0NyZWF0aW9uT3B0aW9ucy5OU1VSTEJvb2ttYXJrQ3JlYXRpb25XaXRoU2VjdXJpdHlTY29wZSwgW10sIG51bGwpXG4gIE5TVXNlckRlZmF1bHRzLnN0YW5kYXJkVXNlckRlZmF1bHRzLnNldE9iamVjdEZvcktleShkYXRhLCB0b2RvdHh0Qm9va21hcmtEYXRhS2V5KVxufVxuXG5mdW5jdGlvbiBsb2FkQm9va21hcmsgKCkge1xuICBjb25zdCBkYXRhID0gTlNVc2VyRGVmYXVsdHMuc3RhbmRhcmRVc2VyRGVmYXVsdHMuZGF0YUZvcktleSh0b2RvdHh0Qm9va21hcmtEYXRhS2V5KVxuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGNvbnN0IGlzU3RhbGUgPSBuZXcgaW50ZXJvcC5SZWZlcmVuY2UoaW50ZXJvcC50eXBlcy5ib29sKVxuICBjb25zdCB1cmwgPSBOU1VSTC5VUkxCeVJlc29sdmluZ0Jvb2ttYXJrRGF0YU9wdGlvbnNSZWxhdGl2ZVRvVVJMQm9va21hcmtEYXRhSXNTdGFsZUVycm9yKFxuICAgIGRhdGEsXG4gICAgTlNVUkxCb29rbWFya0NyZWF0aW9uT3B0aW9ucy5OU1VSTEJvb2ttYXJrQ3JlYXRpb25XaXRoU2VjdXJpdHlTY29wZSxcbiAgICBudWxsLCBpc1N0YWxlKVxuICBjb25zb2xlLmxvZygnW0lORk9dIGlzU3RhbGUnLCBpc1N0YWxlLnZhbHVlKVxuICBpZiAoaXNTdGFsZS52YWx1ZSkge1xuICAgIGNvbnNvbGUubG9nKCdbV0FSTklOR10gaXNTdGFsZSA9PSB0cnVlLCBJIHdpbGwgcmUtc3RvcmUgYW5kIHJlLWxvYWQgYm9va21hcmsnLCBpc1N0YWxlLnZhbHVlKVxuICAgIHN0b3JlQm9va21hcmsodXJsKVxuICAgIHJldHVybiBsb2FkQm9va21hcmsoKVxuICB9XG4gIHJldHVybiB1cmxcbn1cblxuZnVuY3Rpb24gbG9hZERvY3VtZW50IChkb2N1bWVudExvYWRlZCkge1xuICBjb25zdCB1cmwgPSBsb2FkQm9va21hcmsoKVxuICBsb2FkRG9jdW1lbnRXaXRoVVJMKHVybCwgZG9jdW1lbnRMb2FkZWQpXG59XG5cbmZ1bmN0aW9uIGxvYWREb2N1bWVudFdpdGhVUkwgKHVybCwgZG9jdW1lbnRMb2FkZWQpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRMb2FkZWQobnVsbClcbiAgfVxuICBjb25zdCBkb2N1bWVudCA9IERvY3VtZW50LmFsbG9jKCkuaW5pdFdpdGhGaWxlVVJMKHVybClcbiAgZG9jdW1lbnQub3BlbldpdGhDb21wbGV0aW9uSGFuZGxlcihzdWNjZXNzID0+IHtcbiAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgIGRvY3VtZW50TG9hZGVkKG51bGwpXG4gICAgfVxuICAgIHN0b3JlQm9va21hcmsodXJsKVxuICAgIGRvY3VtZW50TG9hZGVkKGRvY3VtZW50KVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgbG9hZERvY3VtZW50V2l0aFVSTCwgbG9hZERvY3VtZW50IH1cbiJdLCJzb3VyY2VSb290IjoiIn0=